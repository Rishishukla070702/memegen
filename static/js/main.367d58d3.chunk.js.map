{"version":3,"sources":["components/Memes.jsx","components/Templates.jsx","App.js","reportWebVitals.js","index.js"],"names":["Memes","meme","setmeme","useState","template_id","id","username","password","boxes","form","setform","className","src","url","alt","Array","box_count","map","_","index","type","placeholder","onChange","e","newBoxes","text","target","value","onClick","box","fetch","then","res","json","data","console","log","Templates","templates","template","style","backgroundImage","App","setTemplates","useEffect","memes","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oOA+CgBA,EA7CF,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAClB,EAAuBC,mBAAS,CAC5BC,YAAaH,EAAKI,GAClBC,SAAS,cACTC,SAAS,aACTC,MAAM,KAJV,mBAAOC,EAAP,KAAYC,EAAZ,KAkBA,OACI,sBAAKC,UAAU,OAAf,UACI,qBAAKC,IAAKX,EAAKY,IAAKC,IAAI,KACxB,8BAEQ,YAAIC,MAAMd,EAAKe,YAAYC,KAAI,SAACC,EAAGC,GAAJ,OAC3B,uBAAOC,KAAK,OAAmBC,YAAW,uBAAkBF,EAAM,GAClEG,SAAU,SAACC,GACP,IAAMC,EAAWf,EAAKD,MACtBgB,EAASL,GAAS,CAACM,KAAKF,EAAEG,OAAOC,OACjCjB,EAAQ,2BAAID,GAAL,IAAWD,MAAOgB,OAJLL,QAYpC,gCACI,wBAAQS,QA/BA,WAChB,IAAIf,EAAG,4DAAwDJ,EAAKL,YAA7D,qBAAqFK,EAAKH,SAA1F,qBAA+GG,EAAKF,UAC3HE,EAAKD,MAAMS,KAAI,SAACY,EAAKV,GAChBN,GAAK,UAAF,OAAYM,EAAZ,mBAA4BU,EAAIJ,SAExCK,MAAMjB,GAAKkB,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAC1BF,MAAK,SAAAG,GACFC,QAAQC,IAAIF,GACZhC,EAAQ,2BAAID,GAAL,IAAWY,IAAKqB,EAAKA,KAAKrB,WAuB7B,0BACA,wBAAQe,QAAS,WAAK1B,EAAQ,OAA9B,qCC5BDmC,EAbG,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,UAAUpC,EAAa,EAAbA,QAC1B,OACI,qBAAKS,UAAU,YAAf,SACK2B,EAAUrB,KAAI,SAAAsB,GAAQ,OAC3B,qBAAuB5B,UAAU,WAAWiB,QAAS,WACjD1B,EAAQqC,IADZ,SAGE,qBAAKC,MAAO,CAACC,gBAAgB,OAAD,OAAQF,EAAS1B,IAAjB,MAA0BF,UAAU,QAAhE,gBAHQ4B,EAASlC,UCwBZqC,MAvBf,WACE,MAAkCvC,mBAAS,IAA3C,mBAAOmC,EAAP,KAAkBK,EAAlB,KACA,EAAwBxC,mBAAS,MAAjC,mBAAOF,EAAP,KAAaC,EAAb,KAUA,OATA0C,qBAAU,WACRd,MAAM,qCACLC,MAAK,SAACC,GAAD,OAAQA,EAAIC,UACjBF,MAAK,SAACG,GACLS,EAAaT,EAAKA,KAAKW,YAGzB,IAGA,sBAAKlC,UAAU,MAAf,UACE,gDACU,OAATV,EAAgB,cAAC,EAAD,CAAWqC,UAAWA,EAAWpC,QAASA,IAAa,cAAC,EAAD,CAAOD,KAAMA,EAAMC,QAASA,QCR3F4C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBjB,MAAK,YAAkD,IAA/CkB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.367d58d3.chunk.js","sourcesContent":["import { useState } from \"react\"\r\n\r\nconst Memes = ({meme, setmeme}) => {\r\n    const [form,setform] = useState({\r\n        template_id: meme.id,\r\n        username:\"RishiShukla\",\r\n        password:\"9792490046\",\r\n        boxes:[],\r\n    })\r\n    const genrateMeme = () =>{\r\n        let url = `https://api.imgflip.com/caption_image?template_id=${form.template_id}&username=${form.username}&password=${form.password}`\r\n        form.boxes.map((box, index)=>{\r\n             url+=`&boxes[${index}][text]=${box.text}`\r\n        })\r\n        fetch(url).then(res => res.json())\r\n        .then(data => {\r\n            console.log(data)\r\n            setmeme({...meme, url: data.data.url})\r\n        })\r\n        \r\n    }\r\n    return(\r\n        <div className=\"meme\">\r\n            <img src={meme.url} alt=\"\"></img>\r\n            <div>\r\n                {\r\n                    [...Array(meme.box_count)].map((_, index)=>(\r\n                        <input type=\"text\" key={index} placeholder={`Meme Caption ${index+1}`}\r\n                        onChange={(e)=> {\r\n                            const newBoxes = form.boxes\r\n                            newBoxes[index] = {text:e.target.value}\r\n                            setform({...form, boxes: newBoxes})\r\n                        }}\r\n                        />\r\n                    \r\n                    ))\r\n                }\r\n                \r\n            </div>\r\n            <div>\r\n                <button onClick={genrateMeme}>Genrate Meme</button>\r\n                <button onClick={()=>{setmeme(null)}}>Choose Templates</button>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n export default Memes","const Templates = ({templates,setmeme}) => {\r\n    return (\r\n        <div className=\"templates\">\r\n            {templates.map(template =>(\r\n        <div key={template.id} className=\"template\" onClick={()=>{\r\n            setmeme(template)\r\n        }}>\r\n          <div style={{backgroundImage:`url(${template.url})`}} className=\"image\" > </div>\r\n        </div>\r\n      ))}\r\n        </div>\r\n    )\r\n}\r\nexport default Templates","import {useState, useEffect} from 'react'\nimport './App.css';\nimport Memes from './components/Memes';\nimport Templates from './components/Templates';\n\nfunction App() {\n  const [templates, setTemplates] = useState([])\n  const [meme, setmeme] = useState(null);\n  useEffect(() => {\n    fetch(\"https://api.imgflip.com/get_memes\")\n    .then((res)=> res.json())\n    .then((data)=>{\n      setTemplates(data.data.memes)\n    })\n  }\n  , [])\n\n  return (\n    <div className=\"App\">\n      <h1>Meme generator</h1>\n      {meme === null ? <Templates templates={templates} setmeme={setmeme}/> : <Memes meme={meme} setmeme={setmeme}/>}\n      \n      \n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}